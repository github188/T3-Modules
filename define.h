
#include "T3IOmodbus.h"

//master branch

#define DEFAULT_TIMEOUT  0

#define MAX_FILTER 				32 //GW: used for filter counter
#define DEFAULT_OFFSET          500

// --- input channels -------------------
#if defined (T3_32IN)
	#define MAX_INPUT_CHANNELS 32
#else
	#define MAX_INPUT_CHANNELS 16
#endif
 
// --- output channels ------------------
#if defined (T3_8IN16OUT)
	#define MAX_OUTPUT_CHANNELS 16
#elif defined (PWM_TRANSDUCER)
	#define MAX_OUTPUT_CHANNELS 6
#elif defined(T3_8IN13OUT)
	#define MAX_OUTPUT_CHANNELS 13
#else
	#define MAX_OUTPUT_CHANNELS 8
#endif

// --- output switch size --------------
#if defined (T3_8IN16OUT)||(T3_8IN13OUT)
	#define OUTPUT_SIZE			2
#else
	#define OUTPUT_SIZE			1
#endif

// --- LED banks ----------------------
#if defined (T3_8IO) || (T3_8IO_REV8) || (T3_8IO_A) || (T3_8IO_REV6)
	#define MAX_LED_BANK	3

#elif defined (T3_8IN16OUT)||(T3_8IN13OUT)
	#define MAX_LED_BANK	4

#elif defined (T3_32IN)
	#define MAX_LED_BANK	5

#elif defined (PWM_TRANSDUCER)
	#define MAX_LED_BANK	2


#endif




#define FLASH_RAM_START 64
	
#define SEND				1
#define RECEIVE				0

#define READ_VARIABLES      3
#define WRITE_VARIABLES     6
#define MULTIPLE_WRITE		16
#define CHECKONLINE			25


// note changing the databuflen larger will make it compile properly but the device will not work properly
// problem observed when length changed to 100
#define DATABUFLEN			40
//#define SENDPOOLLEN         16

#define RECEIVE		0
#define SEND		1

#define FALSE 0
#define TRUE  1

#define LO	0
#define HI	1


#define ORIGINALADDRESSVALUE	100 


// starting point to where to read in the flash for data transfer
// RL 3/11/04
#define DATA_TO_ISP				60928	// 0xEE00 = 60928
#define DATA_TO_FIRMWARE		61184	// 0xEF00 = 61184



#define EVENT_QUEUE_SIZE 	TOTAL_TIMERS 



// --- defines for reading rectifications -----------------------------------------
/*
#ifdef T3_32IN
	#define INPUT_NOISE_THRESHOLD	1
	#define INPUT_FILTER 			1
#else
//	#define INPUT_NOISE_THRESHOLD	200		// threshold 200/1024 = 1V
//	#define INPUT_FILTER 			10		// set to make an update at every second

	#define INPUT_NOISE_THRESHOLD	100
	#define INPUT_FILTER 			10

#endif
*/

#if defined (T3_32IN)
	#define INPUT_NOISE_THRESHOLD	100	 //1500	 GW
	#define INPUT_FILTER 			1

#elif defined (T3_8IN16OUT)
	#define INPUT_NOISE_THRESHOLD	100	 //1500 GW
	#define INPUT_FILTER 			1

#else
	#define INPUT_NOISE_THRESHOLD	100		//200 threshold 200/1024 = 1V //GW
	#define INPUT_FILTER 			10		// set to make an update at every second

#endif

#define NOISE_TURN_POINT			2

#define BUFFER_DIFFERENCE_THRESHOLD	10
#define BUFFER_DIVIDER				3


#define CALIBRATION_OFFSET 128 //allows us to store FLASH_CALIBRATION as an unsigned char
#define CALIBRATION_PRECISION_POINTS	10	

#define TESTING_INCREMENT_VALUE 100		// testing step size value
//#define TESTING_INCREMENT_BUFFER 500	// testing signal differences
#define TESTING_ERROR_MARGIN 50		// testing to acceptable error range



typedef enum
{
  HEARTBEAT_PULSE = 0,	// 0
  REFRESH_OUTPUTS,
  REFRESH_INPUTS,
  //FLEXDRIVER,
  //TIMER_SOP,

  //INPUT_PWM_TIMER,	// 5
  //HIGH_SPEED,
  CHECK_SWITCHES,
 // RESET_INPUTS_OUTPUTS_AUTO,
  INPUT1_TIMER,
  INPUT2_TIMER,
  INPUT3_TIMER,
  INPUT4_TIMER,
  INPUT5_TIMER,
  INPUT6_TIMER,
  INPUT7_TIMER,
  INPUT8_TIMER,
  STORE_PULSE,
  TOTAL_TIMERS , 

  SERIAL_COMMANDS,	
  TOTAL_EVENTS,

  START_COMMAND = 128,
  STOP_COMAND 	
} et_event ;








// type defines which makes the code easier to handle.  names are more general and makes array addressing easier
// **************************************************************************************
#if defined (T3_32IN)

typedef /*idata*/ enum 
{

	// input side Lo bank
  EEP_INPUT1 = T32I_INPUT1 - ORIGINALADDRESSVALUE,  	   			// Input 0 
  EEP_INPUT2 = T32I_INPUT2 - ORIGINALADDRESSVALUE, 					// Input 1 
  EEP_INPUT3 = T32I_INPUT3 - ORIGINALADDRESSVALUE,  				// Input 2 
  EEP_INPUT4 = T32I_INPUT4 - ORIGINALADDRESSVALUE,					// Input 3 
  EEP_INPUT5 = T32I_INPUT5 - ORIGINALADDRESSVALUE,					// Input 4 
  EEP_INPUT6 = T32I_INPUT6 - ORIGINALADDRESSVALUE,      			// Input 5 
  EEP_INPUT7 = T32I_INPUT7 - ORIGINALADDRESSVALUE,  				// Input 6 
  EEP_INPUT8 = T32I_INPUT8 - ORIGINALADDRESSVALUE,      			// Input 7 

	// input side Hi bank
  EEP_INPUT9  = T32I_INPUT9 - ORIGINALADDRESSVALUE,
  EEP_INPUT10 = T32I_INPUT10 - ORIGINALADDRESSVALUE,
  EEP_INPUT11 = T32I_INPUT11 - ORIGINALADDRESSVALUE,
  EEP_INPUT12 = T32I_INPUT12 - ORIGINALADDRESSVALUE,
  EEP_INPUT13 = T32I_INPUT13 - ORIGINALADDRESSVALUE,
  EEP_INPUT14 = T32I_INPUT14 - ORIGINALADDRESSVALUE,
  EEP_INPUT15 = T32I_INPUT15 - ORIGINALADDRESSVALUE,
  EEP_INPUT16 = T32I_INPUT16 - ORIGINALADDRESSVALUE,

	// output side HI bank
  EEP_INPUT17 = T32I_INPUT17 - ORIGINALADDRESSVALUE,
  EEP_INPUT18 = T32I_INPUT18 - ORIGINALADDRESSVALUE,
  EEP_INPUT19 = T32I_INPUT19 - ORIGINALADDRESSVALUE,
  EEP_INPUT20 = T32I_INPUT20 - ORIGINALADDRESSVALUE,
  EEP_INPUT21 = T32I_INPUT21 - ORIGINALADDRESSVALUE,
  EEP_INPUT22 = T32I_INPUT22 - ORIGINALADDRESSVALUE,
  EEP_INPUT23 = T32I_INPUT23 - ORIGINALADDRESSVALUE,
  EEP_INPUT24 = T32I_INPUT24 - ORIGINALADDRESSVALUE,

	// Output side Lo bank
  EEP_INPUT25 = T32I_INPUT25 - ORIGINALADDRESSVALUE,
  EEP_INPUT26 = T32I_INPUT26 - ORIGINALADDRESSVALUE,
  EEP_INPUT27 = T32I_INPUT27 - ORIGINALADDRESSVALUE,
  EEP_INPUT28 = T32I_INPUT28 - ORIGINALADDRESSVALUE,
  EEP_INPUT29 = T32I_INPUT29 - ORIGINALADDRESSVALUE,
  EEP_INPUT30 = T32I_INPUT30 - ORIGINALADDRESSVALUE,
  EEP_INPUT31 = T32I_INPUT31 - ORIGINALADDRESSVALUE,
  EEP_INPUT32 = T32I_INPUT32 - ORIGINALADDRESSVALUE,


// --- LED set A ----------
  EEP_LEDA_PAIR1,	// 
  EEP_LEDA_PAIR2,
  EEP_LEDA_PAIR3,
  EEP_LEDA_PAIR4,
  EEP_LEDA_PAIR5,
  EEP_LEDA_PAIR6,
  EEP_LEDA_PAIR7,
  EEP_LEDA_PAIR8,

  EEP_LEDA_PAIR9,	// 
  EEP_LEDA_PAIR10,
  EEP_LEDA_PAIR11,
  EEP_LEDA_PAIR12,
  EEP_LEDA_PAIR13,
  EEP_LEDA_PAIR14,
  EEP_LEDA_PAIR15,
  EEP_LEDA_PAIR16,

  EEP_LEDA_PAIR17,	// 
  EEP_LEDA_PAIR18,
  EEP_LEDA_PAIR19,
  EEP_LEDA_PAIR20,
  EEP_LEDA_PAIR21,
  EEP_LEDA_PAIR22,
  EEP_LEDA_PAIR23,
  EEP_LEDA_PAIR24,

  EEP_LEDA_PAIR25,	// 
  EEP_LEDA_PAIR26,
  EEP_LEDA_PAIR27,
  EEP_LEDA_PAIR28,
  EEP_LEDA_PAIR29,
  EEP_LEDA_PAIR30,
  EEP_LEDA_PAIR31,
  EEP_LEDA_PAIR32,

// --- LED set B --------------

  EEP_LEDB_PAIR1,	// 
  EEP_LEDB_PAIR2,
  EEP_LEDB_PAIR3,
  EEP_LEDB_PAIR4,
  EEP_LEDB_PAIR5,
  EEP_LEDB_PAIR6,
  EEP_LEDB_PAIR7,
  EEP_LEDB_PAIR8,

  EEP_LEDB_PAIR9,	// 
  EEP_LEDB_PAIR10,
  EEP_LEDB_PAIR11,
  EEP_LEDB_PAIR12,
  EEP_LEDB_PAIR13,
  EEP_LEDB_PAIR14,
  EEP_LEDB_PAIR15,
  EEP_LEDB_PAIR16,

  EEP_LEDB_PAIR17,	// 
  EEP_LEDB_PAIR18,
  EEP_LEDB_PAIR19,
  EEP_LEDB_PAIR20,
  EEP_LEDB_PAIR21,
  EEP_LEDB_PAIR22,
  EEP_LEDB_PAIR23,
  EEP_LEDB_PAIR24,

  EEP_LEDB_PAIR25,	// 
  EEP_LEDB_PAIR26,
  EEP_LEDB_PAIR27,
  EEP_LEDB_PAIR28,
  EEP_LEDB_PAIR29,
  EEP_LEDB_PAIR30,
  EEP_LEDB_PAIR31,
  EEP_LEDB_PAIR32,

// --- LED status for on/off/blinking ----------

  EEP_LED_STATUS_PAIR1,	// 
  EEP_LED_STATUS_PAIR2,
  EEP_LED_STATUS_PAIR3,
  EEP_LED_STATUS_PAIR4,
  EEP_LED_STATUS_PAIR5,
  EEP_LED_STATUS_PAIR6,
  EEP_LED_STATUS_PAIR7,
  EEP_LED_STATUS_PAIR8,

  EEP_LED_STATUS_PAIR9,	// 
  EEP_LED_STATUS_PAIR10,
  EEP_LED_STATUS_PAIR11,
  EEP_LED_STATUS_PAIR12,
  EEP_LED_STATUS_PAIR13,
  EEP_LED_STATUS_PAIR14,
  EEP_LED_STATUS_PAIR15,
  EEP_LED_STATUS_PAIR16,

  EEP_LED_STATUS_PAIR17,	// 
  EEP_LED_STATUS_PAIR18,
  EEP_LED_STATUS_PAIR19,
  EEP_LED_STATUS_PAIR20,
  EEP_LED_STATUS_PAIR21,
  EEP_LED_STATUS_PAIR22,
  EEP_LED_STATUS_PAIR23,
  EEP_LED_STATUS_PAIR24,

  EEP_LED_STATUS_PAIR25,	// 
  EEP_LED_STATUS_PAIR26,
  EEP_LED_STATUS_PAIR27,
  EEP_LED_STATUS_PAIR28,
  EEP_LED_STATUS_PAIR29,
  EEP_LED_STATUS_PAIR30,
  EEP_LED_STATUS_PAIR31,
  EEP_LED_STATUS_PAIR32,
  TOTAL_EE_PARAMETERS ,        //  
	
	EEP_INPUT1_RANGE = TOTAL_EE_PARAMETERS,					//228	Set range for each input. 0 = raw data,1 = 10K Celsius,2 = 10K Fahrenheit			  
	EEP_INPUT2_RANGE,					//		3 = 0 - 100%,4 = ON/OFF,5 = OFF/ON
	EEP_INPUT3_RANGE,
	EEP_INPUT4_RANGE,	
	EEP_INPUT5_RANGE,
	EEP_INPUT6_RANGE,
	EEP_INPUT7_RANGE,
	EEP_INPUT8_RANGE,

	EEP_INPUT9_RANGE,
	EEP_INPUT10_RANGE,
	EEP_INPUT11_RANGE,
	EEP_INPUT12_RANGE,
	EEP_INPUT13_RANGE,
	EEP_INPUT14_RANGE,
	EEP_INPUT15_RANGE,
	EEP_INPUT16_RANGE,

	EEP_INPUT17_RANGE,
	EEP_INPUT18_RANGE,
	EEP_INPUT19_RANGE,
	EEP_INPUT20_RANGE,
	EEP_INPUT21_RANGE,
	EEP_INPUT22_RANGE,
	EEP_INPUT23_RANGE,
	EEP_INPUT24_RANGE,

	EEP_INPUT25_RANGE,
	EEP_INPUT26_RANGE,
	EEP_INPUT27_RANGE,
	EEP_INPUT28_RANGE,
	EEP_INPUT29_RANGE,
	EEP_INPUT30_RANGE,
	EEP_INPUT31_RANGE,
	EEP_INPUT32_RANGE,

	EEP_INPUT1_FILTER,
	EEP_INPUT2_FILTER,
	EEP_INPUT3_FILTER,
	EEP_INPUT4_FILTER,
	EEP_INPUT5_FILTER,
	EEP_INPUT6_FILTER,
	EEP_INPUT7_FILTER,
	EEP_INPUT8_FILTER,
	EEP_INPUT9_FILTER,

	EEP_INPUT10_FILTER,
	EEP_INPUT11_FILTER,
	EEP_INPUT12_FILTER,
	EEP_INPUT13_FILTER,
	EEP_INPUT14_FILTER,
	EEP_INPUT15_FILTER,
	EEP_INPUT16_FILTER,

	EEP_INPUT17_FILTER,
	EEP_INPUT18_FILTER,
	EEP_INPUT19_FILTER,
	EEP_INPUT20_FILTER,
	EEP_INPUT21_FILTER,
	EEP_INPUT22_FILTER,
	EEP_INPUT23_FILTER,
	EEP_INPUT24_FILTER,

	EEP_INPUT25_FILTER,
	EEP_INPUT26_FILTER,
	EEP_INPUT27_FILTER,
	EEP_INPUT28_FILTER,
	EEP_INPUT29_FILTER,
	EEP_INPUT30_FILTER,
	EEP_INPUT31_FILTER,
	EEP_INPUT32_FILTER,

  // TOTAL_EE_PARAMETERS ,        //  
   EEP_INPUT0_CALIBRATION  /*= TOTAL_EE_PARAMETERS*/,
   EEP_INPUT1_CALIBRATION = EEP_INPUT0_CALIBRATION + NUM_INPUTS - 1 ,
   EEP_RANGE_LO,
   EEP_RANGE_HI,

  } et_menu_parameter ;



#elif defined (T3_8IN16OUT)

typedef /*idata*/ enum 
{

  EEP_OUTPUT1 = T38I16O_OUTPUT1 - ORIGINALADDRESSVALUE,  				// 00 Output 0 
  EEP_OUTPUT2 = T38I16O_OUTPUT2 - ORIGINALADDRESSVALUE,				// 01 Output 1 
  EEP_OUTPUT3 = T38I16O_OUTPUT3 - ORIGINALADDRESSVALUE,  				// 02 Output 2 
  EEP_OUTPUT4 = T38I16O_OUTPUT4 - ORIGINALADDRESSVALUE,				// 03 Output 3 
  EEP_OUTPUT5 = T38I16O_OUTPUT5 - ORIGINALADDRESSVALUE,				// 04 Output 4 
  EEP_OUTPUT6 = T38I16O_OUTPUT6 - ORIGINALADDRESSVALUE,      			// 05 Output 5 
  EEP_OUTPUT7 = T38I16O_OUTPUT7 - ORIGINALADDRESSVALUE,  				// 06 Output 6 
  EEP_OUTPUT8 = T38I16O_OUTPUT8 - ORIGINALADDRESSVALUE,      			// 07 Output 7 

  EEP_INPUT1 = T38I16O_INPUT1 - ORIGINALADDRESSVALUE,  	   			// 08 Input 0 
  EEP_INPUT2 = T38I16O_INPUT2 - ORIGINALADDRESSVALUE, 				// 09 Input 1 
  EEP_INPUT3 = T38I16O_INPUT3 - ORIGINALADDRESSVALUE,  				// 10 Input 2 
  EEP_INPUT4 = T38I16O_INPUT4 - ORIGINALADDRESSVALUE,					// 11 Input 3 
  EEP_INPUT5 = T38I16O_INPUT5 - ORIGINALADDRESSVALUE,					// 12 Input 4 
  EEP_INPUT6 = T38I16O_INPUT6 - ORIGINALADDRESSVALUE,      			// 13 Input 5 
  EEP_INPUT7 = T38I16O_INPUT7 - ORIGINALADDRESSVALUE,  				// 14 Input 6 
  EEP_INPUT8 = T38I16O_INPUT8 - ORIGINALADDRESSVALUE,      			// 15 Input 7 

  EEP_OUTPUT9 =  T38I16O_OUTPUT9 - ORIGINALADDRESSVALUE,  				// 08 Output 8 
  EEP_OUTPUT10 = T38I16O_OUTPUT10 - ORIGINALADDRESSVALUE,				// 09 Output 9 
  EEP_OUTPUT11 = T38I16O_OUTPUT11 - ORIGINALADDRESSVALUE,  			// 10 Output 10 
  EEP_OUTPUT12 = T38I16O_OUTPUT12 - ORIGINALADDRESSVALUE,				// 11 Output 11 
  EEP_OUTPUT13 = T38I16O_OUTPUT13 - ORIGINALADDRESSVALUE,				// 12 Output 12 
  EEP_OUTPUT14 = T38I16O_OUTPUT14 - ORIGINALADDRESSVALUE,      		// 13 Output 13 
  EEP_OUTPUT15 = T38I16O_OUTPUT15 - ORIGINALADDRESSVALUE,  			// 14 Output 14 
  EEP_OUTPUT16 = T38I16O_OUTPUT16 - ORIGINALADDRESSVALUE,      		// 15 Output 15 

  EEP_SWITCH_STATE1 = T38I16O_SWITCH_STATE1 - ORIGINALADDRESSVALUE,	// 23 First bank of switches
  EEP_SWITCH_STATE2 = T38I16O_SWITCH_STATE2 - ORIGINALADDRESSVALUE,	// 24 Second bank of switches

  EEP_IN_COUNT_HI = T38I16O_IN_COUNT_HI - ORIGINALADDRESSVALUE,
  EEP_IN_COUNT_LO = T38I16O_IN_COUNT_LO - ORIGINALADDRESSVALUE,

	EEP_INPUT1_RANGE = 	T38IO_INPUT1_RANGE - ORIGINALADDRESSVALUE,			//128	Set range for each input. 0 = raw data,1 = 10K Celsius,2 = 10K Fahrenheit			  
	EEP_INPUT2_RANGE = 	T38IO_INPUT2_RANGE - ORIGINALADDRESSVALUE,					//		3 = 0 - 100%,4 = ON/OFF,5 = OFF/ON
	EEP_INPUT3_RANGE = 	T38IO_INPUT3_RANGE - ORIGINALADDRESSVALUE,
	EEP_INPUT4_RANGE = 	T38IO_INPUT4_RANGE - ORIGINALADDRESSVALUE,	
	EEP_INPUT5_RANGE = 	T38IO_INPUT5_RANGE - ORIGINALADDRESSVALUE,
	EEP_INPUT6_RANGE = 	T38IO_INPUT6_RANGE - ORIGINALADDRESSVALUE,
	EEP_INPUT7_RANGE = 	T38IO_INPUT7_RANGE - ORIGINALADDRESSVALUE,
	EEP_INPUT8_RANGE = 	T38IO_INPUT8_RANGE - ORIGINALADDRESSVALUE,

  EEP_INPUT1_FILTER,
  EEP_INPUT2_FILTER,
  EEP_INPUT3_FILTER,
  EEP_INPUT4_FILTER,
  EEP_INPUT5_FILTER,
  EEP_INPUT6_FILTER,
  EEP_INPUT7_FILTER,
  EEP_INPUT8_FILTER,


  TOTAL_EE_PARAMETERS         //  18
//  EEP_INPUT0_CALIBRATION  /*= TOTAL_EE_PARAMETERS*/,
//  EEP_INPUT1_CALIBRATION = EEP_INPUT0_CALIBRATION + NUM_INPUTS 

} et_menu_parameter ;


#elif defined (PWM_TRANSDUCER)

typedef /*idata*/ enum 
{

  EEP_OUTPUT1 = T38IO_OUTPUT1 - ORIGINALADDRESSVALUE,  				// 00 Output 0 
  EEP_OUTPUT2 = T38IO_OUTPUT2 - ORIGINALADDRESSVALUE,				// 01 Output 1 
  EEP_OUTPUT3 = T38IO_OUTPUT3 - ORIGINALADDRESSVALUE,  				// 02 Output 2 
  EEP_OUTPUT4 = T38IO_OUTPUT4 - ORIGINALADDRESSVALUE,				// 03 Output 3 
  EEP_OUTPUT5 = T38IO_OUTPUT5 - ORIGINALADDRESSVALUE,				// 04 Output 4 
  EEP_OUTPUT6 = T38IO_OUTPUT6 - ORIGINALADDRESSVALUE,      			// 05 Output 5 
  EEP_OUTPUT7 = T38IO_OUTPUT7 - ORIGINALADDRESSVALUE,  				// 06 Output 6 
  EEP_OUTPUT8 = T38IO_OUTPUT8 - ORIGINALADDRESSVALUE,      			// 07 Output 7 

  EEP_INPUT1 = T38IO_INPUT1 - ORIGINALADDRESSVALUE,  	   			// 08 Input 0 
  EEP_INPUT2 = T38IO_INPUT2 - ORIGINALADDRESSVALUE, 				// 09 Input 1 
  EEP_INPUT3 = T38IO_INPUT3 - ORIGINALADDRESSVALUE,  				// 10 Input 2 
  EEP_INPUT4 = T38IO_INPUT4 - ORIGINALADDRESSVALUE,					// 11 Input 3 
  EEP_INPUT5 = T38IO_INPUT5 - ORIGINALADDRESSVALUE,					// 12 Input 4 
  EEP_INPUT6 = T38IO_INPUT6 - ORIGINALADDRESSVALUE,      			// 13 Input 5 
  EEP_INPUT7 = T38IO_INPUT7 - ORIGINALADDRESSVALUE,  				// 14 Input 6 
  EEP_INPUT8 = T38IO_INPUT8 - ORIGINALADDRESSVALUE,      			// 15 Input 7 

  EEP_INPUT1_TIMER,	   			// 08 Input 0 
  EEP_INPUT2_TIMER,				// 09 Input 1 
  EEP_INPUT3_TIMER,				// 10 Input 2 
  EEP_INPUT4_TIMER,				// 11 Input 3 
  EEP_INPUT5_TIMER,				// 12 Input 4 
  EEP_INPUT6_TIMER,    			// 13 Input 5 
  EEP_INPUT7_TIMER,				// 14 Input 6 
  EEP_INPUT8_TIMER,    			// 15 Input 7 

  EEP_INPUT1_RANGE,					//124	Set range for each input. 0 = raw data,1 = 10K Celsius,2 = 10K Fahrenheit			  
  EEP_INPUT2_RANGE,					//		3 = 0 - 100%,4 = ON/OFF,5 = OFF/ON
  EEP_INPUT3_RANGE,
  EEP_INPUT4_RANGE,	
  EEP_INPUT5_RANGE,
  EEP_INPUT6_RANGE,
  EEP_INPUT7_RANGE,
  EEP_INPUT8_RANGE,


  TOTAL_EE_PARAMETERS         //  18

  } et_menu_parameter ;

#elif defined (T3_8IN13OUT)

typedef /*idata*/ enum 
{

  EEP_OUTPUT1 = T38IO_OUTPUT1 - ORIGINALADDRESSVALUE,  				// 00 Output 0 
  EEP_OUTPUT2 = T38IO_OUTPUT2 - ORIGINALADDRESSVALUE,				// 01 Output 1 
  EEP_OUTPUT3 = T38IO_OUTPUT3 - ORIGINALADDRESSVALUE,  				// 02 Output 2 
  EEP_OUTPUT4 = T38IO_OUTPUT4 - ORIGINALADDRESSVALUE,				// 03 Output 3 
  EEP_OUTPUT5 = T38IO_OUTPUT5 - ORIGINALADDRESSVALUE,				// 04 Output 4 
  EEP_OUTPUT6 = T38IO_OUTPUT6 - ORIGINALADDRESSVALUE,      			// 05 Output 5 
  EEP_OUTPUT7 = T38IO_OUTPUT7 - ORIGINALADDRESSVALUE,  				// 06 Output 6 
  EEP_OUTPUT8 = T38IO_OUTPUT8 - ORIGINALADDRESSVALUE,      			// 07 Output 7 

  EEP_INPUT1 = T38IO_INPUT1 - ORIGINALADDRESSVALUE,  	   			// 08 Input 0 
  EEP_INPUT2 = T38IO_INPUT2 - ORIGINALADDRESSVALUE, 				// 09 Input 1 
  EEP_INPUT3 = T38IO_INPUT3 - ORIGINALADDRESSVALUE,  				// 10 Input 2 
  EEP_INPUT4 = T38IO_INPUT4 - ORIGINALADDRESSVALUE,					// 11 Input 3 
  EEP_INPUT5 = T38IO_INPUT5 - ORIGINALADDRESSVALUE,					// 12 Input 4 
  EEP_INPUT6 = T38IO_INPUT6 - ORIGINALADDRESSVALUE,      			// 13 Input 5 
  EEP_INPUT7 = T38IO_INPUT7 - ORIGINALADDRESSVALUE,  				// 14 Input 6 
  EEP_INPUT8 = T38IO_INPUT8 - ORIGINALADDRESSVALUE,      			// 15 Input 7 

  EEP_SWITCH_STATE1 = T38IO_SWITCH_STATE1 - ORIGINALADDRESSVALUE,	// 16 First bank of switches
  EEP_SWITCH_STATE2 = T38IO_SWITCH_STATE2 - ORIGINALADDRESSVALUE,	// 17 Second bank of switches

  TOTAL_EE_PARAMETERS         //  18

  } et_menu_parameter ;


#else

typedef /*idata*/ enum 
{

  EEP_OUTPUT1 = T38IO_OUTPUT1 - ORIGINALADDRESSVALUE,  				// 00 Output 0 
  EEP_OUTPUT2 = T38IO_OUTPUT2 - ORIGINALADDRESSVALUE,				// 01 Output 1 
  EEP_OUTPUT3 = T38IO_OUTPUT3 - ORIGINALADDRESSVALUE,  				// 02 Output 2 
  EEP_OUTPUT4 = T38IO_OUTPUT4 - ORIGINALADDRESSVALUE,				// 03 Output 3 
  EEP_OUTPUT5 = T38IO_OUTPUT5 - ORIGINALADDRESSVALUE,				// 04 Output 4 
  EEP_OUTPUT6 = T38IO_OUTPUT6 - ORIGINALADDRESSVALUE,      			// 05 Output 5 
  EEP_OUTPUT7 = T38IO_OUTPUT7 - ORIGINALADDRESSVALUE,  				// 06 Output 6 
  EEP_OUTPUT8 = T38IO_OUTPUT8 - ORIGINALADDRESSVALUE,      			// 07 Output 7 

  EEP_INPUT1 = T38IO_INPUT1 - ORIGINALADDRESSVALUE,  	   			// 08 Input 0 
  EEP_INPUT2 = T38IO_INPUT2 - ORIGINALADDRESSVALUE, 				// 09 Input 1 
  EEP_INPUT3 = T38IO_INPUT3 - ORIGINALADDRESSVALUE,  				// 10 Input 2 
  EEP_INPUT4 = T38IO_INPUT4 - ORIGINALADDRESSVALUE,					// 11 Input 3 
  EEP_INPUT5 = T38IO_INPUT5 - ORIGINALADDRESSVALUE,					// 12 Input 4 
  EEP_INPUT6 = T38IO_INPUT6 - ORIGINALADDRESSVALUE,      			// 13 Input 5 
  EEP_INPUT7 = T38IO_INPUT7 - ORIGINALADDRESSVALUE,  				// 14 Input 6 
  EEP_INPUT8 = T38IO_INPUT8 - ORIGINALADDRESSVALUE,      			// 15 Input 7 

  EEP_SWITCH_STATE1 = T38IO_SWITCH_STATE1 - ORIGINALADDRESSVALUE,	// 16 First bank of switches
  EEP_SWITCH_STATE2 = T38IO_SWITCH_STATE2 - ORIGINALADDRESSVALUE,	// 17 Second bank of switches
 
  EEP_INPUT1_RANGE,					//118	Set range for each input. 0 = raw data,1 = 10K Celsius,2 = 10K Fahrenheit			  
  EEP_INPUT2_RANGE,					//		3 = 0 - 100%,4 = ON/OFF,5 = OFF/ON
  EEP_INPUT3_RANGE,
  EEP_INPUT4_RANGE,	
  EEP_INPUT5_RANGE,
  EEP_INPUT6_RANGE,
  EEP_INPUT7_RANGE,
  EEP_INPUT8_RANGE,
  EEP_INPUT1_FILTER,
  EEP_INPUT2_FILTER,
  EEP_INPUT3_FILTER,
  EEP_INPUT4_FILTER,
  EEP_INPUT5_FILTER,
  EEP_INPUT6_FILTER,
  EEP_INPUT7_FILTER,
  EEP_INPUT8_FILTER,     
   TOTAL_EE_PARAMETERS   //  18
//  EEP_INPUT0_CALIBRATION  /*= TOTAL_EE_PARAMETERS*/,
//  EEP_INPUT1_CALIBRATION = EEP_INPUT0_CALIBRATION + NUM_INPUTS 


} et_menu_parameter;
 
#endif
// **************************************************************************************





#define MINUTE_COUNTER	90 









// 199 is the highest address we can use when storing variables in the flash memory
#define EEP_SERINALNUMBER_WRITE_FLAG	MAX_FLASH_CONSTRANGE 





// ---------------- pic const -----------------------------
enum {

PIC_SERIAL_TIMEOUT

};





struct link
{
	unsigned int  registers[ TOTAL_EE_PARAMETERS ] ;//parameter[12]
//  et_jump_function event_function[ TOTAL_EVENTS ] ;//TOTAL_EVENTS=8
//  et_jump_function jump_function[ TOTAL_TIMERS ] ;//TOTAL_TIMERS=6
//  et_event event_queue[ EVENT_QUEUE_SIZE ]  ;//EVENT_QUEUE_SIZE=3
//  unsigned char big_ticks[ TOTAL_TIMERS ] ;//9       //number of heartbeats x small_ticks, high gear notched evey ~ ms
};  





/* --------------- Timer SOP feature ------------------------- */
// set the device ID on the network, where to start and where to end
#ifdef TIMER_SOP_FEATURE
	#define START_ID 	10
	#define END_ID 		30
#endif





/* --------------- Flex Driver feature ------------------------- */
// set the device ID on the network, where to start and where to end
#define DISPLAY_LENGTH	8
#define PAIR_LENGTH	32
#define TABLE_REFRESH_RATE	20	// 20*0.50sec = 10sec.  So every 15 seconds the table is refreshed, chosen arbitrarily

#define STATE_CHANGE_LOWER	250
#define STATE_CHANGE_UPPER	725



// --------------- added defines for Benny's features --------------/
#define PULSE_LENGTH	0
#define HOLDING_LENGTH	50









/* --------------- PWM transducer feature ------------------------- */
#define PORT0_READING_FILTER	10
#define MAX_CALIBRATION_POINTS	20
#define DEFINE_TABS				11








// ************* Flash Memory info **********************************************
//	Flash Memory related variables
// --------------------------------------------------------------------

// must comply with memory setup in goal_flash.h file
typedef enum
{
	FLASH_MEMORY,
	CALIBRATION_MEMORY,
 	BLOCK_COUNT
};






// *** high speed ****************************************************************
#define HIGH_BUFFER		20		// arbitrarily chosen at 20









